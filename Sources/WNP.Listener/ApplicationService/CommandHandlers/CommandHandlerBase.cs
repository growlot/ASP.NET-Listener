// <copyright file="CommandHandlerBase.cs" company="Advanced Metering Services LLC">
//     Copyright (c) Advanced Metering Services LLC. All rights reserved.
// </copyright>

namespace AMSLLC.Listener.ApplicationService.CommandHandlers
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Domain;
    using Repository.WNP;

    /// <summary>
    /// Base class for all command handlers.
    /// </summary>
    public abstract class CommandHandlerBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandHandlerBase" /> class.
        /// </summary>
        /// <param name="unitOfWork">The unit of work.</param>
        /// <param name="domainEventBus">The domain event bus.</param>
        public CommandHandlerBase(IWNPUnitOfWork unitOfWork, IDomainEventBus domainEventBus)
        {
            this.UnitOfWork = unitOfWork;
            this.DomainEventBus = domainEventBus;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommandHandlerBase" /> class.
        /// </summary>
        /// <param name="domainEventBus">The domain event bus.</param>
        public CommandHandlerBase(IDomainEventBus domainEventBus)
            : this(null, domainEventBus)
        {
        }

        /// <summary>
        /// Gets the unit of work for this command.
        /// </summary>
        /// <value>
        /// The unit of work.
        /// </value>
        protected IWNPUnitOfWork UnitOfWork { get; private set; }

        /// <summary>
        /// Gets the domain event bus used by this command.
        /// </summary>
        /// <value>
        /// The domain event bus.
        /// </value>
        protected IDomainEventBus DomainEventBus { get; private set; }

        /// <summary>
        /// Publishes the events generated by agregate root.
        /// </summary>
        /// <param name="aggregateRoot">The aggreagate root.</param>
        /// <returns>The task with all published events.</returns>
        protected Task PublishEvents(IAggregateRoot aggregateRoot)
        {
            if (aggregateRoot == null)
            {
                throw new ArgumentNullException(nameof(aggregateRoot), "Can not publish events if aggregate is not specified.");
            }

            var taskList = new List<Task>();
            foreach (var domainEvent in aggregateRoot.DomainEvents)
            {
                taskList.Add(this.DomainEventBus.PublishAsync(domainEvent));
            }

            return Task.WhenAll(taskList);
        }
    }
}
