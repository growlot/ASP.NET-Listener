<#@ include file="PetaPoco.Core.ttinclude" #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.12.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Linq" #>

<#@ output extension=".cs" #>

using AMSLLC.Listener.Persistence.Metadata;

<#
    ConnectionStringName = "WNPDatabase";			// Uses last connection string in config if not specified

    var tableNameRedefined = new Dictionary<string, string>()
    {
        {"tmetadata", "Metadata"},
    };

	var tables = LoadTables();
    foreach (var table in tables)
    {
        var tableName = GetTableName(tableNameRedefined, table.Name);
#>
using System.Collections.Generic;
namespace AMSLLC.Listener.Persistence.Metadata {
public class <#=tableName#>Impl: ITableInformation {
	<#foreach (var column in table.Columns) {
		var realColName = column.Name;
		var readableName = Dehumanize(column.Name);
	#>
	/// <summary>
	/// <para />Database Type: <#=column.PropertyType#>
	/// <para />Is Nullable: <#=column.IsNullable#>
	/// <para />Is Primary Key: <#=column.IsPK#>
	/// </summary>
	public string <#=readableName#> = "<#=realColName#>";
	<#}#>

	public string RealTableName
	{
		get { return "<#=table.Name#>".ToLowerInvariant(); }		
	}

	public Dictionary<string, ColumnInformation> ColumnsLookup { get { return _columnsLookup; } }

	public Dictionary<string, ColumnInformation> _columnsLookup = new Dictionary<string, ColumnInformation>() 
	{
		<#foreach (var column in table.Columns) {
			var realColName = column.Name;
			var readableName = Dehumanize(column.Name);
		#>
		{"<#=readableName#>", new ColumnInformation() { DataType = "<#=column.PropertyType#>", ModelName = "<#=readableName#>", ColumnName = "<#=realColName#>"}},
		<#}#>
	};

	public override string ToString() 
	{
		return "<#= string.Format("{0}.{1}", table.Schema, table.Name.ToLowerInvariant()) #>";
	}
}
}
<#

	SaveOutput(string.Format("{0}.cs", tableName));
    }
#>

namespace AMSLLC.Listener.Persistence.Metadata {
using System.Collections.Generic;

public static class DBMetadata {
<#foreach (var table in tables) {
    var tableName = GetTableName(tableNameRedefined, table.Name); #>
	/// <summary>
	/// <para />Schema: <#=table.Schema#>
	/// <para />Table Name: <#=table.Name#>
	/// <para />Class Name: <#=table.ClassName#>
	/// <para />Is View: <#=table.IsView#>
	/// </summary>
	public static readonly <#=tableName#>Impl <#=tableName#> = new <#=tableName#>Impl();	
<#}#>

	public static Dictionary<string, ITableInformation> TableLookup = new Dictionary<string, ITableInformation>() 
	{
		<#foreach (var table in tables) {
		var tableName = GetTableName(tableNameRedefined, table.Name);#>
		{<#=tableName#>.RealTableName, <#=tableName#>},
		<#}#>
	};

	public static readonly string ALL = "*";

	public static string C(params string[] columns) {
		return string.Join(", ", columns);
	}
}

public interface ITableInformation 
{
	string RealTableName {get;}
	Dictionary<string, ColumnInformation> ColumnsLookup {get;}
}

public class ColumnInformation 
{
	public string DataType { get; set; }
	public string ModelName { get; set; }
	public string ColumnName { get; set; }
}
}
<#
	DeleteOldOutputs();
#>

<#+

    public string GetTableName(Dictionary<string, string> redefined, string tableName)
    {
        var tableNameLower = tableName.ToLowerInvariant();
        return Dehumanize(redefined.ContainsKey(tableNameLower) ? redefined[tableNameLower] : tableName, true);
    }

	public string Dehumanize(string val, bool isTable = false)
	{
	    if (isTable && val.StartsWith("T", StringComparison.InvariantCultureIgnoreCase) &&
	        !val.StartsWith("Transaction", StringComparison.InvariantCultureIgnoreCase))
	        val = val.Substring(1);

		if (val.IndexOf("_", StringComparison.Ordinal) != -1)
		{
			var tableWords = val.Split(new[] {"_"}, StringSplitOptions.RemoveEmptyEntries)
				.Select(word => word.Substring(0, 1).ToUpperInvariant() + word.Substring(1).ToLowerInvariant());
        
			return CleanUp(string.Join("", tableWords));
		}

	    var firstLetter = val.Substring(0, 1).ToUpperInvariant();
	    var rest = val.Substring(1);

	    if (rest.All(Char.IsUpper))
	        rest = rest.ToLowerInvariant();

	    val = firstLetter + rest;

		return CleanUp(val);
	}
#>

<#+
  List<string> __savedOutputs = new List<string>();
  Engine __engine = new Engine();  

  void DeleteOldOutputs()
  {
      EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
      foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
      {
          if (!__savedOutputs.Contains(childProjectItem.Name))
              childProjectItem.Delete();
      }
  }  

  void ProcessTemplate(string templateFileName, string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);  

      string template = File.ReadAllText(Host.ResolvePath(templateFileName));
      string output = __engine.ProcessTemplate(template, Host);
      File.WriteAllText(outputFilePath, output);  

      EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
      templateProjectItem.ProjectItems.AddFromFile(outputFilePath);  

      __savedOutputs.Add(outputFileName);
  }  

  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);  

      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
      this.GenerationEnvironment = new StringBuilder();  

      EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
      templateProjectItem.ProjectItems.AddFromFile(outputFilePath);  

      __savedOutputs.Add(outputFileName);
  }

      EnvDTE.ProjectItem __getTemplateProjectItem()
    {
        EnvDTE.Project dteProject = __getTemplateProject();

        IVsProject vsProject = __dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");

        return templateItem;
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    static IVsProject __dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }
#>