<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(msbuildprojectdirectory)\..\..\..\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.dll" #>
<#@ assembly name="$(msbuildprojectdirectory)\..\..\..\packages\EntityFramework.6.1.3\lib\net45\EntityFramework.SqlServer.dll" #>
<#@ assembly name="$(TargetDir)\AMSLLC.Listener.ODataService.dll" #>
<#@ assembly name="$(msbuildprojectdirectory)\..\..\..\3rdParty\AsyncPoco.1.1.2\lib\net45\AsyncPoco.dll" #>
<#@ import namespace="System.Data.Entity" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AMSLLC.Listener.ODataService" #>
<#@ import namespace="System.Data.Entity.Infrastructure" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ output extension=".generated.cs" #>
// <copyright file="ODataListenerServiceConfigurator.cs" company="Advanced Metering Services LLC">
//     Copyright (c) Advanced Metering Services LLC. All rights reserved.
// </copyright>

// <auto-generated>
#pragma warning disable 1591,1573
namespace AMSLLC.Listener.ODataService.Controllers
{
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Web.Http;
using System.Web.OData;
using System.Web.OData.Builder;
using AMSLLC.Listener.ODataService;
using AMSLLC.Listener.Persistence.Listener;
using System.Web.OData.Query;
using Serilog;
using System.CodeDom.Compiler;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Newtonsoft.Json;
using System.Net;

	[GeneratedCode("Listener Controller Generator Template", "1.0.0.0")]
	public abstract partial class BaseListenerODataController: ODataController{
		protected string CompanyCode => this.Request.Headers.GetValues("AMS-Company").FirstOrDefault();

		protected string ApplicationKey => this.Request.Headers.GetValues("AMS-Application").FirstOrDefault();
	}

<#
	var listenerContext = new ListenerODataContext(Configuration.ConnectionString);
	  
	foreach (var type in typeof(ListenerODataContext).GetProperties().Where(p=>p.PropertyType.IsGenericType && p.PropertyType.GetGenericTypeDefinition() == typeof(DbSet<>))){
	var entityType = type.PropertyType.GetGenericArguments()[0].Name;
	EdmProperty key = GetKeyNames(listenerContext, type.PropertyType.GetGenericArguments()[0]).First();
		var keyName = key.Name;
	var keyType = key.PrimitiveType;
#>
	[GeneratedCode("Listener Controller Generator Template", "1.0.0.0")]
	[EnableQuery(AllowedQueryOptions = AllowedQueryOptions.All, AllowedLogicalOperators = AllowedLogicalOperators.All)]
	public partial class <#= type.Name #>Controller : BaseListenerODataController{
			private readonly ListenerODataContext _dbContext;

			/// <summary>
			/// Initializes a new instance of the <see cref="<#= type.Name #>Controller" /> class.
			/// </summary>
			/// <param name="dbctx">The db context.</param>
			public <#= type.Name #>Controller(ListenerODataContext dbctx)
			{
				this._dbContext = dbctx;
			}

			/// <summary>
			/// Get the IQueryable of the served entity.
			/// </summary>
			/// <returns>System.Linq.IQueryable&lt;AMSLLC.Listener.Persistence.Listener.TransactionRegistryViewEntity&gt;.</returns>
			public IQueryable<<#= entityType #>> Get()
			{
				try
				{
					return this._dbContext.Set<<#= entityType #>>().AsQueryable();
				}
				catch (Exception exc)
				{
					Log.Error(exc, "Operation Failed");
					throw;
				}
			}

			/// <summary>
			/// Get the single entity or null using primary key
			/// </summary>
			/// <param name="key">The key.</param>
			/// <returns>System.Web.Http.IHttpActionResult.</returns>
			public IHttpActionResult Get([FromODataUri] <#= keyType #> key)
			{
				try
				{
					var result = this._dbContext.Set<<#= entityType #>>().SingleOrDefault(s => s.<#= keyName #> == key);
					return this.Ok(result);
				}
				catch (Exception exc)
				{
					Log.Error(exc, "Operation Failed");
					throw;
				}
			}

			

		/// <summary>
        /// Update entity
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns>System.Web.Http.IHttpActionResult.</returns>
        public async Task<IHttpActionResult> Patch([FromODataUri] <#= keyType #> key, Delta<<#= entityType #>> delta)
        {
            try
            {
                Log.Debug("Received for PATCh: {0}", JsonConvert.SerializeObject(delta));
				if (!this.ModelState.IsValid)
                {
                    Log.Warning("Request validation failed: {0}", JsonConvert.SerializeObject(this.ModelState));
                    return this.BadRequest(this.ModelState);
                }

                var record = await this._dbContext.Set<<#= entityType #>>().SingleOrDefaultAsync(s => s.<#= keyName #> == key);

                if (record == null)
                {
                    Log.Warning("Record not found for key: {0}", key);
                    return this.BadRequest();
                }

                delta.Patch(record);

				this.Validate(record);

				if (!this.ModelState.IsValid)
                {
                    Log.Warning("Merge entity validation failed: {0}", JsonConvert.SerializeObject(this.ModelState));
                    return this.BadRequest(this.ModelState);
                }

                await this._dbContext.SaveChangesAsync();
                return this.Updated(record);
            }
            catch (Exception exc)
            {
                Log.Error(exc, "Operation Failed");
                throw;
            }
        }

		/// <summary>
        /// Insert entity
        /// </summary>
        /// <param name="entity">The entity to insert</param>
        /// <returns>System.Web.Http.IHttpActionResult.</returns>
		public async Task<IHttpActionResult> Post(<#= entityType #> entity)
		{
			try
            {
				Log.Debug("Received for INSERT: {0}", JsonConvert.SerializeObject(entity));
				if (!this.ModelState.IsValid)
				{
					Log.Warning("Request validation failed: {0}", JsonConvert.SerializeObject(this.ModelState));
					return this.BadRequest(this.ModelState);
				}
				this._dbContext.Set<<#= entityType #>>().Add(entity);
				await this._dbContext.SaveChangesAsync();
				return Created(entity);
			}
            catch (Exception exc)
            {
                Log.Error(exc, "Operation Failed");
                throw;
            }
		}

		/// <summary>
        /// Replace entity
        /// </summary>
        /// <param name="update">The entity to replace</param>
        /// <returns>System.Web.Http.IHttpActionResult.</returns>
		public async Task<IHttpActionResult> Put([FromODataUri] <#= keyType #> key, <#= entityType #> update)
		{
			Log.Debug("Received for REPLACE: {0}", JsonConvert.SerializeObject(update));
			if (!this.ModelState.IsValid)
			{
				Log.Warning("Request validation failed: {0}", JsonConvert.SerializeObject(this.ModelState));
				return this.BadRequest(this.ModelState);
			}
			if (key != update.<#= keyName #>)
			{
				Log.Warning("Attempting to replace different entity than targeted by key. Expected {0}, got {1}", key, update.<#= keyName #>);
				return this.BadRequest();
			}

			var entity = await this._dbContext.Set< <#= entityType #>>().SingleOrDefaultAsync(s=>s.<#= keyName #> == key);
			this._dbContext.Entry(entity).CurrentValues.SetValues(update);
			this.UpdateNested(entity, update);

			try
			{
				await this._dbContext.SaveChangesAsync();
			}
			catch (DbUpdateConcurrencyException)
			{
				if (!this.RecordExists(key))
				{
					return NotFound();
				}
				else
				{
					throw;
				}
			}
			return this.Updated(update);
		}

		public async Task<IHttpActionResult> Delete([FromODataUri] <#= keyType #> key)
		{
			Log.Debug("Received for DELETE: {0}", key);
			var record = await this._dbContext.Set<<#= entityType #>>().FindAsync(key);
			if (record == null)
			{
				Log.Warning("Record not found for key: {0}", key);
				return NotFound();
			}
			this._dbContext.Set<<#= entityType #>>().Remove(record);
			await this._dbContext.SaveChangesAsync();
			return StatusCode(HttpStatusCode.NoContent);
		}

		partial void UpdateNested(<#= entityType #> entity, <#= entityType #> newData);

		private bool RecordExists(<#= keyType #> key)
        {
            return this._dbContext.Set<<#= entityType #>>().Any(p => p.<#= keyName #> == key);
        } 

        protected override void Dispose(bool disposing)
        {
            this._dbContext.Dispose();
            base.Dispose(disposing);
        }
	}

<#
}
#>
[GeneratedCode("Listener Controller Generator Template", "1.0.0.0")]
public partial class ODataControllerConfigurator{

	/// <summary>
    /// Execute configurator to setup OData controllers
    /// </summary>
    /// <param name="builder">The builder.</param>
	public void Run(ODataModelBuilder builder){
	
<#
	foreach (var type in typeof(ListenerODataContext).GetProperties().Where(p=>p.PropertyType.IsGenericType && p.PropertyType.GetGenericTypeDefinition() == typeof(DbSet<>))){
	var entityType = type.PropertyType.GetGenericArguments()[0].Name;
	EdmProperty key = GetKeyNames(listenerContext, type.PropertyType.GetGenericArguments()[0]).First();
		var keyName = key.Name;
	var keyType = key.PrimitiveType;
#>
		this.Setup<#= type.Name #>Controller(builder);
	<#
	}
	#>
	}

<#  
	foreach (var type in typeof(ListenerODataContext).GetProperties().Where(p=>p.PropertyType.IsGenericType && p.PropertyType.GetGenericTypeDefinition() == typeof(DbSet<>))){
	var entityType = type.PropertyType.GetGenericArguments()[0].Name;
	EdmProperty key = GetKeyNames(listenerContext, type.PropertyType.GetGenericArguments()[0]).First();
		var keyName = key.Name;
	var keyType = key.PrimitiveType;
#>
			/// <summary>
			/// Setup the controller.
			/// </summary>
			/// <param name="builder">The builder.</param>
			/// <param name="actionBuilder">The action builder.</param>
			protected virtual void Setup<#= type.Name #>Controller(ODataModelBuilder builder, Action<ODataModelBuilder, EntityTypeConfiguration<<#= entityType #>>> actionBuilder = null, string tableName = null){
				this.PrepareODataController<<#= entityType #>, <#= keyType #>>(builder, a => a.<#= keyName #>, actionBuilder, tableName);
			}

	<#
	}
	#>

	private void PrepareODataController<TEntity, TKey>(
            ODataModelBuilder builder,
            Expression<Func<TEntity, TKey>> primaryKeySelector,
            Action<ODataModelBuilder, EntityTypeConfiguration<TEntity>> actionBuilder = null,
            string tableName = null) where TEntity : class
        {
            // separate OData endpoint for Listener API
            this.MapPetaPocoEntity(builder, primaryKeySelector, tableName);

            var entityType = builder.EntityType<TEntity>();

            actionBuilder?.Invoke(builder, entityType);
        }

        protected void MapPetaPocoEntity<T, TKey>(
            ODataModelBuilder modelBuilder,
            Expression<Func<T, TKey>> primaryKeySelector, string tableName = null)
            where T : class
        {
            if (string.IsNullOrWhiteSpace(tableName))
            {
                var tableNameAttribute = typeof(T).GetCustomAttribute<AsyncPoco.TableNameAttribute>();
                modelBuilder.EntitySet<T>(tableNameAttribute.Value);
            }
            else
            {
                modelBuilder.EntitySet<T>(tableName);
            }
            modelBuilder.EntityType<T>().HasKey(primaryKeySelector);
        }

	}
}
#pragma warning restore 1591,1573
<#+
	public static EdmProperty[] GetKeyNames(DbContext context, Type entityType)
        {
            var metadata = ((IObjectContextAdapter)context).ObjectContext.MetadataWorkspace;

            // Get the mapping between CLR types and metadata OSpace
            var objectItemCollection = ((ObjectItemCollection)metadata.GetItemCollection(DataSpace.OSpace));

            // Get metadata for given CLR type
            var entityMetadata = metadata
                    .GetItems<EntityType>(DataSpace.OSpace)
                    .Single(e => objectItemCollection.GetClrType(e) == entityType);

            return entityMetadata.KeyProperties.ToArray();
        }
#>