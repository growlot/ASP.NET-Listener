<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AMSLLC.Listener.ODataService.DbContext" #>
<#@ import namespace="System.Data.Entity.Infrastructure" #>
<#@ import namespace="System.Data.Entity.Core.Metadata.Edm" #>
<#@ output extension=".generated.cs" #>

namespace AMSLLC.Listener.ODataService.Controllers
{
using System;
using System.Linq;
using System.Web.Http;
using System.Web.OData;
using AMSLLC.Listener.ODataService;
using AMSLLC.Listener.ODataService.DbContext;
using AMSLLC.Listener.Persistence.Listener;
using System.Web.OData.Query;
using Serilog;
<#
	var listenerContext = new ListenerODataContext("Server=localhost\\sqlexpress;Database=ListenerKCPL220;User Id=wndba; Password=Wn+dbapw1;MultipleActiveResultSets=True;App=EntityFramework");
	  
	foreach (var type in typeof(ListenerODataContext).GetProperties().Where(p=>p.PropertyType.IsGenericType && p.PropertyType.GetGenericTypeDefinition() == typeof(DbSet<>))){
	var entityType = type.PropertyType.GetGenericArguments()[0].Name;
	EdmProperty key = GetKeyNames(listenerContext, type.PropertyType.GetGenericArguments()[0]).First();
		var keyName = key.Name;
	var keyType = key.PrimitiveType;
#>
[EnableQuery(AllowedQueryOptions = AllowedQueryOptions.All, AllowedLogicalOperators = AllowedLogicalOperators.All)]
public partial class <#= type.Name #>Controller : ODataController{
		private readonly ListenerODataContext _dbContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= type.Name #>Controller" /> class.
        /// </summary>
        /// <param name="dbctx">The db context.</param>
        public <#= type.Name #>Controller(ListenerODataContext dbctx)
        {
            this._dbContext = dbctx;
        }

        public string CompanyCode => this.Request.Headers.GetValues("AMS-Company").FirstOrDefault();
        public string ApplicationKey => this.Request.Headers.GetValues("AMS-Application").FirstOrDefault();

        public IQueryable<<#= entityType #>> Get()
        {
            try
            {
                return this._dbContext.Set<<#= entityType #>>().AsQueryable();
            }
            catch (Exception exc)
            {
                Log.Error(exc, "Operation Failed");
                throw;
            }
        }

        public IHttpActionResult Get([FromODataUri] <#= keyType #> key)
        {
            try
            {
                var result = this._dbContext.Set<<#= entityType #>>().SingleOrDefault(s => s.<#= keyName #> == key);
                return this.Ok(result);
            }
            catch (Exception exc)
            {
                Log.Error(exc, "Operation Failed");
                throw;
            }
        }
}

<#
}
#>
}

<#+
	public static EdmProperty[] GetKeyNames(DbContext context, Type entityType)
        {
            var metadata = ((IObjectContextAdapter)context).ObjectContext.MetadataWorkspace;

            // Get the mapping between CLR types and metadata OSpace
            var objectItemCollection = ((ObjectItemCollection)metadata.GetItemCollection(DataSpace.OSpace));

            // Get metadata for given CLR type
            var entityMetadata = metadata
                    .GetItems<EntityType>(DataSpace.OSpace)
                    .Single(e => objectItemCollection.GetClrType(e) == entityType);

            return entityMetadata.KeyProperties.ToArray();
        }
#>