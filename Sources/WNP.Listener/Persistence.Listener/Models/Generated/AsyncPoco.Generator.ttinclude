<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(RepoName) && !string.IsNullOrEmpty(ConnectionStringName)) RepoName=ConnectionStringName + "DB";
if (string.IsNullOrEmpty(Namespace)) Namespace="AsyncPoco";
if (string.IsNullOrEmpty(RepoName)) RepoName="AsyncPocoDB";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace <#=Namespace #>
{
	using Poco	

<# if (GenerateCommon) { #>
	[CLSCompliant(false)]
	public partial class <#=RepoName#> : Database
	{
		public <#=RepoName#>() 
			: base("<#=ConnectionStringName#>")
		{
			CommonConstruct();
		}

		public <#=RepoName#>(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			<#=RepoName#> GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static <#=RepoName#> GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new <#=RepoName#>();
        }

		[ThreadStatic] static <#=RepoName#> _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
<# if (GenerateOperations) { #>
		public class Record<T> where T:new()
		{
			public static <#=RepoName#> repo { get { return <#=RepoName#>.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public Task<object> InsertAsync() { return repo.InsertAsync(this); }
<# if (!TrackModifiedColumns) { #>
			public Task SaveAsync() { return repo.SaveAsync(this); }
			public Task<int> UpdateAsync() { return repo.UpdateAsync(this); }
<# } #>
			public Task<int> UpdateAsync(IEnumerable<string> columns) { return repo.UpdateAsync(this, columns); }
			public static Task<int> UpdateAsync(string sql, params object[] args) { return repo.UpdateAsync<T>(sql, args); }
			public static Task<int> UpdateAsync(Sql sql) { return repo.UpdateAsync<T>(sql); }
			public Task<int> DeleteAsync() { return repo.DeleteAsync(this); }
			public static Task<int> DeleteAsync(string sql, params object[] args) { return repo.DeleteAsync<T>(sql, args); }
			public static Task<int> DeleteAsync(Sql sql) { return repo.DeleteAsync<T>(sql); }
			public static Task<int> DeleteAsync(object primaryKey) { return repo.DeleteAsync<T>(primaryKey); }
			public static Task<bool> ExistsAsync(object primaryKey) { return repo.ExistsAsync<T>(primaryKey); }
			public static Task<bool> ExistsAsync(string sql, params object[] args) { return repo.ExistsAsync<T>(sql, args); }
			public static Task<T> SingleOrDefaultAsync(object primaryKey) { return repo.SingleOrDefaultAsync<T>(primaryKey); }
			public static Task<T> SingleOrDefaultAsync(string sql, params object[] args) { return repo.SingleOrDefaultAsync<T>(sql, args); }
			public static Task<T> SingleOrDefaultAsync(Sql sql) { return repo.SingleOrDefaultAsync<T>(sql); }
			public static Task<T> FirstOrDefaultAsync(string sql, params object[] args) { return repo.FirstOrDefaultAsync<T>(sql, args); }
			public static Task<T> FirstOrDefaultAsync(Sql sql) { return repo.FirstOrDefaultAsync<T>(sql); }
			public static Task<T> SingleAsync(object primaryKey) { return repo.SingleAsync<T>(primaryKey); }
			public static Task<T> SingleAsync(string sql, params object[] args) { return repo.SingleAsync<T>(sql, args); }
			public static Task<T> SingleAsync(Sql sql) { return repo.SingleAsync<T>(sql); }
			public static Task<T> FirstAsync(string sql, params object[] args) { return repo.FirstAsync<T>(sql, args); }
			public static Task<T> FirstAsync(Sql sql) { return repo.FirstAsync<T>(sql); }
			public static Task<List<T>> FetchAsync(string sql, params object[] args) { return repo.FetchAsync<T>(sql, args); }
			public static Task<List<T>> FetchAsync(Sql sql) { return repo.FetchAsync<T>(sql); }
			public static Task<List<T>> FetchAsync(long page, long itemsPerPage, string sql, params object[] args) { return repo.FetchAsync<T>(page, itemsPerPage, sql, args); }
			public static Task<List<T>> FetchAsync(long page, long itemsPerPage, Sql sql) { return repo.FetchAsync<T>(page, itemsPerPage, sql); }
			public static Task<List<T>> SkipTakeAsync(long skip, long take, string sql, params object[] args) { return repo.SkipTakeAsync<T>(skip, take, sql, args); }
			public static Task<List<T>> SkipTakeAsync(long skip, long take, Sql sql) { return repo.SkipTakeAsync<T>(skip, take, sql); }
			public static Task<Page<T>> PageAsync(long page, long itemsPerPage, string sql, params object[] args) { return repo.PageAsync<T>(page, itemsPerPage, sql, args); }
			public static Task<Page<T>> PageAsync(long page, long itemsPerPage, Sql sql) { return repo.PageAsync<T>(page, itemsPerPage, sql); }
			public static Task QueryAsync(string sql, object[] args, Action<T> action) { return repo.QueryAsync<T>(sql, args, action); }
			public static Task QueryAsync(string sql, object[] args, Func<T, bool> func) { return repo.QueryAsync<T>(sql, args, func); }
			public static Task QueryAsync(string sql, Action<T> action) { return repo.QueryAsync<T>(sql, action); }
			public static Task QueryAsync(string sql, Func<T, bool> func) { return repo.QueryAsync<T>(sql, func); }
			public static Task QueryAsync(Sql sql, Action<T> action) { return repo.QueryAsync<T>(sql, action); }
			public static Task QueryAsync(Sql sql, Func<T, bool> func) { return repo.QueryAsync<T>(sql, func); }
<# if (TrackModifiedColumns) { #>			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public async Task<int> UpdateAsync() 
			{ 
				if (ModifiedColumns==null)
					return await repo.UpdateAsync(this); 

				int retv = await repo.UpdateAsync(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public Task SaveAsync() 
			{ 
				if (repo.IsNew(this))
					return repo.InsertAsync(this);
				else
					return UpdateAsync();
			}
<# } #>
		}
<# } #>
	}
<# } #>	

<# if (GeneratePocos) { #>
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
    
	[TableName("<#=tbl.Name#>")]
<# if (tbl.PK!=null && tbl.PK.IsAutoIncrement) { #>
<# if (tbl.SequenceName==null) { #>
	[PrimaryKey("<#=tbl.PK.Name#>")]
<# } else { #>
	[PrimaryKey("<#=tbl.PK.Name#>", sequenceName="<#=tbl.SequenceName#>")]
<# } #>
<# } #>
<# if (tbl.PK!=null && !tbl.PK.IsAutoIncrement) { #>
	[PrimaryKey("<#=tbl.PK.Name#>", autoIncrement=false)]
<# } #>
	[ExplicitColumns]
    public partial class <#=tbl.ClassName#> <# if (GenerateOperations) { #>: <#=RepoName#>.Record<<#=tbl.ClassName#>> <# } #> 
    {
<#
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{
		// Column bindings
#>
<# if (TrackModifiedColumns) { #>
<# if (col.Name!=col.PropertyName) { #>
        [Column("<#=col.Name#>")] 
<# } else { #>
        [Column] 
<# } #>
		public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> 
		{ 
			get
			{
				return _<#=col.PropertyName #>;
			}
			set
			{
				_<#=col.PropertyName #> = value;
				MarkColumnModified("<#=col.Name#>");
			}
		}
		<#=col.PropertyType #><#=CheckNullable(col)#> _<#=col.PropertyName #>;

<# } else { #>
<# if (col.Name!=col.PropertyName) { #>
		[Column("<#=col.Name#>")] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } else { #>
		[Column] public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } #>
<# } #>
<# } #>
	}
<# } #>
<# } #>
}